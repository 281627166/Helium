///////////////////////////////////////////////////////////////////////////
// Generated by litesql-gen.exe on Mon Jul 19 17:52:48 2010 (localtime): 
// C:\Projects\github\kramdar\AppFramework\SDK\LiteSQL\0.3.8_prebuilt\bin\litesql-gen.exe
// http://sourceforge.net/apps/trac/litesql/ 
//
// PLEASE DO "NOT" EDIT THIS FILE!
///////////////////////////////////////////////////////////////////////////

#pragma once

#include "Platform/Types.h"

#ifndef trackerdbgenerated_hpp
#define trackerdbgenerated_hpp
#include "litesql.hpp"
namespace Luna {
class TrackedFile;
class TrackedProperty;
class TrackedFileProperties {
public:
    class Row {
    public:
        litesql::Field<tstring> mValue;
        litesql::Field<int> trackedProperty;
        litesql::Field<int> trackedFile;
        Row(const litesql::Database& db, const litesql::Record& rec=litesql::Record());
    };
    static const tstring table__;
    static const litesql::FieldType TrackedFile;
    static const litesql::FieldType TrackedProperty;
    static const litesql::FieldType MValue;
    static void link(const litesql::Database& db, const Luna::TrackedFile& o0, const Luna::TrackedProperty& o1, tstring mValue= TXT( "" ));
    static void unlink(const litesql::Database& db, const Luna::TrackedFile& o0, const Luna::TrackedProperty& o1, tstring mValue);
    static void del(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr());
    static litesql::DataSource<TrackedFileProperties::Row> getRows(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr());
    template <class T> static litesql::DataSource<T> get(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr(), const litesql::Expr& srcExpr=litesql::Expr());
;
;
};
class FileReferences {
public:
    class Row {
    public:
        litesql::Field<int> trackedFile2;
        litesql::Field<int> trackedFile1;
        Row(const litesql::Database& db, const litesql::Record& rec=litesql::Record());
    };
    static const tstring table__;
    static const litesql::FieldType TrackedFile1;
    static const litesql::FieldType TrackedFile2;
    static void link(const litesql::Database& db, const Luna::TrackedFile& o0, const Luna::TrackedFile& o1);
    static void unlink(const litesql::Database& db, const Luna::TrackedFile& o0, const Luna::TrackedFile& o1);
    static void del(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr());
    static litesql::DataSource<FileReferences::Row> getRows(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr());
    static litesql::DataSource<Luna::TrackedFile> getTrackedFile1(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr(), const litesql::Expr& srcExpr=litesql::Expr());
    static litesql::DataSource<Luna::TrackedFile> getTrackedFile2(const litesql::Database& db, const litesql::Expr& expr=litesql::Expr(), const litesql::Expr& srcExpr=litesql::Expr());
};
class TrackedFile : public litesql::Persistent {
public:
    class Own {
    public:
        static const litesql::FieldType Id;
    };
    class PropertiesHandle : public litesql::RelationHandle<TrackedFile> {
    public:
        PropertiesHandle(const TrackedFile& owner);
        void link(const TrackedProperty& o0, tstring mValue= TXT( "" ));
        void unlink(const TrackedProperty& o0, tstring mValue);
        void del(const litesql::Expr& expr=litesql::Expr());
        litesql::DataSource<TrackedProperty> get(const litesql::Expr& expr=litesql::Expr(), const litesql::Expr& srcExpr=litesql::Expr());
        litesql::DataSource<TrackedFileProperties::Row> getRows(const litesql::Expr& expr=litesql::Expr());
    };
    class FileReferencesHandle : public litesql::RelationHandle<TrackedFile> {
    public:
        FileReferencesHandle(const TrackedFile& owner);
        void link(const TrackedFile& o0);
        void unlink(const TrackedFile& o0);
        void del(const litesql::Expr& expr=litesql::Expr());
        litesql::DataSource<TrackedFile> get(const litesql::Expr& expr=litesql::Expr(), const litesql::Expr& srcExpr=litesql::Expr());
        litesql::DataSource<FileReferences::Row> getRows(const litesql::Expr& expr=litesql::Expr());
    };
    static const tstring type__;
    static const tstring table__;
    static const tstring sequence__;
    static const litesql::FieldType Id;
    litesql::Field<int> id;
    static const litesql::FieldType Type;
    litesql::Field<tstring> type;
    static const litesql::FieldType MPath;
    litesql::Field<tstring> mPath;
    static const litesql::FieldType MSize;
    litesql::Field<int> mSize;
    static const litesql::FieldType MLastModified;
    litesql::Field<litesql::DateTime> mLastModified;
protected:
    void defaults();
public:
    TrackedFile(const litesql::Database& db);
    TrackedFile(const litesql::Database& db, const litesql::Record& rec);
    TrackedFile(const TrackedFile& obj);
    const TrackedFile& operator=(const TrackedFile& obj);
    TrackedFile::PropertiesHandle properties();
    TrackedFile::FileReferencesHandle fileReferences();
protected:
    tstring insert(litesql::Record& tables, litesql::Records& fieldRecs, litesql::Records& valueRecs);
    void create();
    virtual void addUpdates(Updates& updates);
    virtual void addIDUpdates(Updates& updates);
public:
    static void getFieldTypes(std::vector<litesql::FieldType>& ftypes);
protected:
    virtual void delRecord();
    virtual void delRelations();
public:
    virtual void update();
    virtual void del();
    virtual bool typeIsCorrect();
    std::auto_ptr<TrackedFile> upcast();
    std::auto_ptr<TrackedFile> upcastCopy();
};
tostream & operator<<(tostream& os, TrackedFile o);
class TrackedProperty : public litesql::Persistent {
public:
    class Own {
    public:
        static const litesql::FieldType Id;
    };
    static const tstring type__;
    static const tstring table__;
    static const tstring sequence__;
    static const litesql::FieldType Id;
    litesql::Field<int> id;
    static const litesql::FieldType Type;
    litesql::Field<tstring> type;
    static const litesql::FieldType MName;
    litesql::Field<tstring> mName;
protected:
    void defaults();
public:
    TrackedProperty(const litesql::Database& db);
    TrackedProperty(const litesql::Database& db, const litesql::Record& rec);
    TrackedProperty(const TrackedProperty& obj);
    const TrackedProperty& operator=(const TrackedProperty& obj);
protected:
    tstring insert(litesql::Record& tables, litesql::Records& fieldRecs, litesql::Records& valueRecs);
    void create();
    virtual void addUpdates(Updates& updates);
    virtual void addIDUpdates(Updates& updates);
public:
    static void getFieldTypes(std::vector<litesql::FieldType>& ftypes);
protected:
    virtual void delRecord();
    virtual void delRelations();
public:
    virtual void update();
    virtual void del();
    virtual bool typeIsCorrect();
    std::auto_ptr<TrackedProperty> upcast();
    std::auto_ptr<TrackedProperty> upcastCopy();
};
tostream & operator<<(tostream& os, TrackedProperty o);
class TrackerDBGenerated : public litesql::Database {
public:
    TrackerDBGenerated(tstring backendType, tstring connInfo);
protected:
    virtual std::vector<litesql::Database::SchemaItem> getSchema() const;
    static void initialize();
};
}
#endif